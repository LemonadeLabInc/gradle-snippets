/* ========================================================================== *
 * MAVEN SNIPPET                                                              *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 * Adds a S3 repository (with access and secret keys) if configured to do so, *
 * and always use jcenter and maven central (in that order).                  *
 *                                                                            *
 * Project properties:                                                        *
 *                                                                            *
 * - s3.repository: S3 bucket URL s3://{bucket}.s3-{region}.amazonaws.com/... *
 * - s3.accessKey:  AWS access key for accessing the bucket                   *
 * - s3.secretKey:  AWS secret key for accessing the bucket                   *
 * - buildNumber:   The build number for *release* builds (no snapshots)      *
 *                                                                            *
 * Environment variables:                                                     *
 *                                                                            *
 * - S3_REPOSITORY: Overrides the "s3.repository" property (Travis/Jenkins..) *
 * - S3_ACCESS_KEY: Overrides the "s3.accessKey" property (Travis/Jenkins..)  *
 * - S3_SECRET_KEY: Overrides the "s3.secretKey" property (Travis/Jenkins..)  *
 * - BUILD_NUMBER:  Overrides the "buildNumber" property (Travis/Jankins..)   *
 *                                                                            *
 * ========================================================================== */

apply plugin: 'maven-publish'

// Repository, access and secret overridden from environment (think Jenkins/Travis/...)
def _repository = System.getenv("S3_REPOSITORY")
def _accessKey  = System.getenv("S3_ACCESS_KEY")
def _secretKey  = System.getenv("S3_SECRET_KEY")

// If not overridden, default to project properties
if ((_repository == null) && hasProperty('s3.repository')) _repository = ext['s3.repository']
if ((_accessKey  == null) && hasProperty('s3.accessKey'))  _accessKey  = ext['s3.accessKey']
if ((_secretKey  == null) && hasProperty('s3.secretKey'))  _secretKey  = ext['s3.secretKey']

// Default version: attach build number or "-SNAPSHOT"
def _tag = ' NOT A RELEASE BUILD '
if (version != 'unspecified') {
  if (System.getenv('BUILD_NUMBER') != null) {
    ext.buildNumber = System.getenv('BUILD_NUMBER')
    version = version + '.' + ext['buildNumber']
    _tag = version
  } else if (hasProperty('buildNumber')) {
    version = version + '.' + ext['buildNumber']
    _tag = version
  } else {
    version = version + "-SNAPSHOT"
  }
}

/* ========================================================================== *
/* Tag repository                                                             *
/* ========================================================================== */

task tagRelease(type:Exec) {
  executable 'git'
  args 'tag', '-a', '-m', "Build ${version}", "${_tag}"
}

/* ========================================================================== *
/* Artifacts downloading                                                      *
/* ========================================================================== */

// Default repository name to "maven"
if (_repository != null) {
  repositories {
    maven {
      url _repository
      credentials(AwsCredentials) {
        accessKey _accessKey
        secretKey _secretKey
      }
    }
  }
}

// Always us JCenter and Maven Central
repositories {
  jcenter()
  mavenCentral()
}

/* ========================================================================== *
/* Artifacts publishing                                                       *
/* ========================================================================== */

// Instrument publications *ONLY* if we have a version
if (version != 'unspecified') {

  // Publish in our Maven repo (under build/maven)
  publishing {
    repositories {
      maven {
        url "$buildDir/maven"
      }
    }
  }

  // Upload if we have BOTH S3 configured and a build number (no snapshots)
  if ((_repository != null) && hasProperty('buildNumber')) {
    publishing {
      repositories {
        maven {
          url _repository
          credentials(AwsCredentials) {
            accessKey _accessKey
            secretKey _secretKey
          }
        }
      }
    }
  }

  /* ======================================================================== *
  /* Java  publishing                                                         *
  /* ======================================================================== */

  if (plugins.hasPlugin('java')) {

    // Sources JAR for publishing
    task publishSourcesJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    // JavaDoc JAR for publishing
    task publishJavadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    // Publish in our Maven repo (under build/maven)
    publishing {
      publications {
        main(MavenPublication) {
          from components.java
          artifact publishSourcesJar
          artifact publishJavadocJar
        }
      }
    }
  }

  /* ======================================================================== *
  /* Android Library publishing                                               *
  /* ======================================================================== */

  if (plugins.hasPlugin('com.android.library')) {

    // Sources JAR for publishing
    task publishSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.javaDirectories
      from android.sourceSets.main.resourcesDirectories
    }

    // JavaDoc JAR for publishing
    task publishJavadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    // Publish in our Maven repo (under build/maven)
    publishing {
      publications {
        main(MavenPublication) {
          artifact publishSourcesJar
          artifact publishJavadocJar
        }
      }
    }

    // After evaluation of our Android project, inject our "from" in the main
    // publication emulating a normal Java library but with the release JAR.
    // We don't publish the AAR as it's not natively supported by Eclipse.
    afterEvaluate {

      // Combine our runtime and compile dependencies in a single set
      def _backing = new org.gradle.api.internal.DefaultDomainObjectSet(Dependency.class);
      def _dependencies = new org.gradle.api.internal.artifacts.DefaultDependencySet('android dependencies', _backing);
      _dependencies.addAll(configurations.compile.dependencies)
      _dependencies.addAll(configurations.runtime.dependencies)

      // Prepare our publication artifact (from the AAR)
      def _artifact = new org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact(tasks.packageReleaseJar);
      def _component = new org.gradle.api.internal.java.JavaLibrary(_artifact, _dependencies);

      // Inject the "from" into our main publication
      publishing.publications.main.from(_component);
    }
  }
}
